import { useLocation, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import { TodoList } from "../../types";

const useHomePage = () => {  
  const navigate = useNavigate();
  const location = useLocation();

  // Retrieve the user data either from the location state or localStorage
  const user = location.state?.user || JSON.parse(localStorage.getItem("user") || "null");

  // State to hold the user's to-do lists
  const [todoLists, setTodoLists] = useState<TodoList[]>([]);

  useEffect(() => {
    // If no user is found, navigate to the login page
    if (!user) {
      navigate("/", { replace: true });
    }

    // Fetch the user's to-do lists if a user exists
    if (user) {
      fetch(`http://localhost:5000/api/todolists/${user.id}`)
        .then((res) => res.json())
        .then((data) => setTodoLists(data || []))
        .catch((err) => console.error("Error fetching to-do lists:", err));
    }
  }, [navigate, user]); // Dependency array ensures this runs when the user changes

  // Handle the deletion of a to-do list
  const handleDeleteList = async (id: number) => {
    // Filter out the deleted list from the current state
    const updatedLists = todoLists.filter((list) => list.id !== id);
    setTodoLists(updatedLists);

    // Send the updated lists to the server to save the changes
    try {
      await fetch(`http://localhost:5000/api/todolists/${user.id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedLists), // Send the updated lists
      });
    } catch (err) {
      console.error("Failed to update server after deletion:", err);
    }
  };

  // Create a new to-do list and update both local and server data
  const createNewTodoList = async () => {
    // Create a new to-do list with an autogenerated ID
    const newList: TodoList = {
      id: Date.now(),
      title: `New List`, // Default title for new lists
      tasks: [], // Initialize with no tasks
    };

    // Update the local state with the new list
    const updatedLists = [...todoLists, newList];
    setTodoLists(updatedLists);

    // Send the updated list to the server
    try {
      await fetch(`http://localhost:5000/api/todolists/${user.id}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedLists), // Send the updated lists
      });
    } catch (err) {
      console.error("Failed to update server:", err);
    }
  };

  // Return all necessary state and handlers for the signup form
  return {
    todoLists, 
    user, 
    navigate, 
    handleDeleteList, 
    createNewTodoList,
  };
};

export default useHomePage;
